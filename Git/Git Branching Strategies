Git Branching Strategies -:
========================
- Branches are independent lines of work, stemming from the original codebase. Developers create separate branches for independently working on features so that changes from other developers don’t interfere with an
individual’s line of work. Developers can easily pull changes from different branches and also merge their code with the main branch. This allows easier collaboration for developers working on one codebase.

- Git branching strategies are essential for efficient code management and collaboration within development teams. In this comprehensive guide, we will delve into the various Git branching strategies, their benefits,
implementation steps, and best practices.

Key Terminologies
-----------------
1. Git Branch: A parallel version of the code within a Git repository, allowing for separate development and experimentation.
2. Main Branch (formerly Master Branch): The primary branch of a Git repository where the production-ready code resides.
3. Feature Branch: A branch created to work on a specific feature or task isolated from the main branch.
3. Merge: The process of combining changes from one branch into another.
4. Pull Request (PR): A request made by a developer to merge their changes into another branch, often used for code review.
5. CI/CD Pipeline: Continuous Integration and Continuous Deployment pipeline, automating the process of building, testing, and deploying code changes.
_______________________________________________________________________________________________________________________________________________________
What Is A Branching Strategy?
 A branching strategy is a strategy that software development teams adopt for writing, merging and deploying code with the help of a version control system like Git. It lays down a set of rules that aid the 
developers on how to go about the development process and interact with a shared codebase. Strategies like these are essential as they help in keeping project repositories organized, error free and avoid the
dreaded merge conflicts when multiple developers simultaneously push and pull code from the same repository.

Encountering merge conflicts can impede the swift delivery of code, thereby obstructing the establishment and upkeep of an efficient DevOps workflow. DevOps aims to facilitate a rapid process for releasing
incremental code changes. Therefore, implementing a structured branching strategy can alleviate this challenge, enabling developers to collaborate seamlessly and minimize conflicts. This approach fosters parallel
workstreams within teams, promoting quicker releases and reduced likelihood of conflicts through a well-defined process for source control modifications.

The Branching strategies provides following features:
-----------------------------------------------------
Parallel development
Enhanced productivity due to efficient collaboration
Organized and structured feature releases
Clear path for software development process
Bug-free environment without disrupting development workflow

